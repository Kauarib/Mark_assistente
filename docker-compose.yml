

services:
  # 1. Serviço da Base de Dados MySQL
  db:
    image: mysql:8.0
    container_name: gastos_db
    restart: unless-stopped
    # Este serviço lê as variáveis do .env na raiz do projeto
    env_file: ./.env 
    ports:
      - "3307:3306" # Mapeia a porta 3306 do host para a porta 3307 do container
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - gastos-network
    healthcheck:
      # Comando que o Docker executará dentro do contentor para verificar a saúde
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASS}"]
      interval: 10s   # Intervalo entre as verificações
      timeout: 5s     # Tempo de espera pela resposta do comando
      retries: 5      # Número de tentativas falhadas antes de marcar como "unhealthy"
      start_period: 30s # Período de graça inicial para o contentor iniciar antes de as falhas contarem  

  # 2. Serviço da API de Controlo de Gastos (Node.js)
  api-gastos:
    container_name: api_gastos_service
    build:
      context: ./gastos_
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env # Carrega as variáveis partilhadas (DB, etc.) da raiz
      - ./gastos_/.env # Carrega variáveis específicas deste serviço
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy # Garante que o DB está saudável antes de iniciar a API 
    networks:
      - gastos-network
     

  # 3. Serviço do Backend do Chatbot WhatsApp (Node.js)
  chatbot-whatsapp:
    container_name: chatbot_whatsapp_service
    build:
      context: ./chatbotgastos_
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env # Carrega as variáveis partilhadas (DB, URLs de API) da raiz
      - ./chatbotgastos_/.env # Carrega variáveis específicas (tokens do WhatsApp)
    ports:
      - "3000:3000"
    depends_on:
      - api-gastos
    networks:
      - gastos-network

  # 4. Serviço da Automação de E-mails (Python)
  automacao-emails:
    container_name: automacao_emails_service
    build:
      context: ./automacao_emails
      dockerfile: Dockerfile
    restart: unless-stopped 
    env_file:
      - ./.env # Carrega as variáveis partilhadas (DB, URLs de API) da raiz
      - ./automacao_emails/.env # Carrega variáveis específicas (credenciais IMAP, se ainda usadas)
    depends_on:
      - api-gastos
    networks:
      - gastos-network

networks:
  gastos-network:
    driver: bridge

volumes:
  db_data: